// <auto-generated />
using System;
using AliceRestaurant.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AliceRestaurant.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240402080216_rename_model")]
    partial class rename_model
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AliceRestaurant.Models.DeliveryCategory", b =>
                {
                    b.Property<int>("DeliveryCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryCategoryId"));

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("MenuName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryCategoryId");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("DeliveryCategories");

                    b.HasData(
                        new
                        {
                            DeliveryCategoryId = 1,
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7171),
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7170),
                            MenuName = "Delivery 1"
                        },
                        new
                        {
                            DeliveryCategoryId = 2,
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7177),
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7176),
                            MenuName = "Delivery 2"
                        },
                        new
                        {
                            DeliveryCategoryId = 3,
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7178),
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7178),
                            MenuName = "Sub Delivery A",
                            ParentMenuId = 1
                        },
                        new
                        {
                            DeliveryCategoryId = 4,
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7180),
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7179),
                            MenuName = "Sub Delivery B",
                            ParentMenuId = 1
                        },
                        new
                        {
                            DeliveryCategoryId = 5,
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7181),
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7181),
                            MenuName = "Sub Delivery C",
                            ParentMenuId = 2
                        });
                });

            modelBuilder.Entity("AliceRestaurant.Models.DineInCategory", b =>
                {
                    b.Property<int>("DineInCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DineInCategoryId"));

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("MenuName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("int");

                    b.HasKey("DineInCategoryId");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("DineInCategories");

                    b.HasData(
                        new
                        {
                            DineInCategoryId = 1,
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7040),
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7020),
                            MenuName = "DineIn 1"
                        },
                        new
                        {
                            DineInCategoryId = 2,
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7042),
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7042),
                            MenuName = "DineIn 2"
                        },
                        new
                        {
                            DineInCategoryId = 3,
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7044),
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7043),
                            MenuName = "Sub DineIn A",
                            ParentMenuId = 1
                        },
                        new
                        {
                            DineInCategoryId = 4,
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7046),
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7045),
                            MenuName = "Sub DineIn B",
                            ParentMenuId = 1
                        },
                        new
                        {
                            DineInCategoryId = 5,
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7047),
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7047),
                            MenuName = "Sub DineIn C",
                            ParentMenuId = 2
                        });
                });

            modelBuilder.Entity("AliceRestaurant.Models.Dish", b =>
                {
                    b.Property<int>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DishId"));

                    b.Property<string>("Allergy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DineInCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("DineInType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("KoreanName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SellingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DishId");

                    b.HasIndex("DeliveryCategoryId");

                    b.HasIndex("DineInCategoryId");

                    b.ToTable("Dishes");

                    b.HasData(
                        new
                        {
                            DishId = 1,
                            Allergy = "Allergy",
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7323),
                            DeliveryCategoryId = 1,
                            DeliveryType = "Delivery",
                            Description = "Dish One Description",
                            DineInCategoryId = 1,
                            DineInType = "DineIn",
                            DishName = "Dish 1",
                            EnglishName = "Dish One",
                            ImageUrl = "https://www.google.com",
                            IsAvailable = true,
                            KoreanName = "Dish One",
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7323),
                            Price = 10m,
                            RestaurantId = 1,
                            SellingDate = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7330),
                            ShortName = "D1"
                        },
                        new
                        {
                            DishId = 2,
                            Allergy = "Allergy",
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7333),
                            DeliveryCategoryId = 2,
                            DeliveryType = "Delivery",
                            Description = "Dish Two Description",
                            DineInCategoryId = 2,
                            DineInType = "DineIn",
                            DishName = "Dish 2",
                            EnglishName = "Dish Two",
                            ImageUrl = "https://www.google.com",
                            IsAvailable = true,
                            KoreanName = "Dish Two",
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7332),
                            Price = 20m,
                            RestaurantId = 2,
                            SellingDate = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7335),
                            ShortName = "D2"
                        },
                        new
                        {
                            DishId = 3,
                            Allergy = "Allergy",
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7337),
                            DeliveryCategoryId = 3,
                            DeliveryType = "Delivery",
                            Description = "Dish Three Description",
                            DineInCategoryId = 3,
                            DineInType = "DineIn",
                            DishName = "Dish 3",
                            EnglishName = "Dish Three",
                            ImageUrl = "https://www.google.com",
                            IsAvailable = true,
                            KoreanName = "Dish Three",
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7336),
                            Price = 30m,
                            RestaurantId = 3,
                            SellingDate = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7339),
                            ShortName = "D3"
                        });
                });

            modelBuilder.Entity("AliceRestaurant.Models.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantId"));

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RestaurantId");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            RestaurantId = 1,
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7209),
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7208),
                            Name = "Restaurant 1"
                        },
                        new
                        {
                            RestaurantId = 2,
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7211),
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7210),
                            Name = "Restaurant 2"
                        },
                        new
                        {
                            RestaurantId = 3,
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7212),
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7212),
                            Name = "Restaurant 3"
                        });
                });

            modelBuilder.Entity("AliceRestaurant.Models.RestaurantDish", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("DishId", "RestaurantId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantDishes");

                    b.HasData(
                        new
                        {
                            DishId = 1,
                            RestaurantId = 1,
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7236),
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7236)
                        },
                        new
                        {
                            DishId = 2,
                            RestaurantId = 1,
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7240),
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7239)
                        },
                        new
                        {
                            DishId = 3,
                            RestaurantId = 1,
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7241),
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7241)
                        },
                        new
                        {
                            DishId = 1,
                            RestaurantId = 2,
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7243),
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7242)
                        },
                        new
                        {
                            DishId = 2,
                            RestaurantId = 2,
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7244),
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7244)
                        },
                        new
                        {
                            DishId = 3,
                            RestaurantId = 3,
                            CreatedOn = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7246),
                            LastUpdated = new DateTime(2024, 4, 2, 15, 2, 15, 514, DateTimeKind.Local).AddTicks(7246)
                        });
                });

            modelBuilder.Entity("AliceRestaurant.Models.DeliveryCategory", b =>
                {
                    b.HasOne("AliceRestaurant.Models.DeliveryCategory", "ParentMenu")
                        .WithMany("DeliveryCategories")
                        .HasForeignKey("ParentMenuId");

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("AliceRestaurant.Models.DineInCategory", b =>
                {
                    b.HasOne("AliceRestaurant.Models.DineInCategory", "ParentMenu")
                        .WithMany("DineInCategories")
                        .HasForeignKey("ParentMenuId");

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("AliceRestaurant.Models.Dish", b =>
                {
                    b.HasOne("AliceRestaurant.Models.DeliveryCategory", "DeliveryCategory")
                        .WithMany("Dishes")
                        .HasForeignKey("DeliveryCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AliceRestaurant.Models.DineInCategory", "DineInCategory")
                        .WithMany("Dishes")
                        .HasForeignKey("DineInCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryCategory");

                    b.Navigation("DineInCategory");
                });

            modelBuilder.Entity("AliceRestaurant.Models.RestaurantDish", b =>
                {
                    b.HasOne("AliceRestaurant.Models.Dish", "Dish")
                        .WithMany("RestaurantDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AliceRestaurant.Models.Restaurant", "Restaurant")
                        .WithMany("RestaurantDishes")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("AliceRestaurant.Models.DeliveryCategory", b =>
                {
                    b.Navigation("DeliveryCategories");

                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("AliceRestaurant.Models.DineInCategory", b =>
                {
                    b.Navigation("DineInCategories");

                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("AliceRestaurant.Models.Dish", b =>
                {
                    b.Navigation("RestaurantDishes");
                });

            modelBuilder.Entity("AliceRestaurant.Models.Restaurant", b =>
                {
                    b.Navigation("RestaurantDishes");
                });
#pragma warning restore 612, 618
        }
    }
}
