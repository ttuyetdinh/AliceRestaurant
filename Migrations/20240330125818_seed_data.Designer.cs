// <auto-generated />
using System;
using AliceRestaurant.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AliceRestaurant.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240330125818_seed_data")]
    partial class seed_data
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AliceRestaurant.Models.DeliveryMenu", b =>
                {
                    b.Property<int>("DeliveryMenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryMenuId"));

                    b.Property<string>("MenuName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryMenuId");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("DeliveryMenu");

                    b.HasData(
                        new
                        {
                            DeliveryMenuId = 1,
                            MenuName = "Delivery 1"
                        },
                        new
                        {
                            DeliveryMenuId = 2,
                            MenuName = "Delivery 2"
                        },
                        new
                        {
                            DeliveryMenuId = 3,
                            MenuName = "Sub Delivery A",
                            ParentMenuId = 1
                        },
                        new
                        {
                            DeliveryMenuId = 4,
                            MenuName = "Sub Delivery B",
                            ParentMenuId = 1
                        },
                        new
                        {
                            DeliveryMenuId = 5,
                            MenuName = "Sub Delivery C",
                            ParentMenuId = 2
                        });
                });

            modelBuilder.Entity("AliceRestaurant.Models.DineInMenu", b =>
                {
                    b.Property<int>("DineInMenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DineInMenuId"));

                    b.Property<string>("MenuName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("int");

                    b.HasKey("DineInMenuId");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("DineInMenu");

                    b.HasData(
                        new
                        {
                            DineInMenuId = 1,
                            MenuName = "DineIn 1"
                        },
                        new
                        {
                            DineInMenuId = 2,
                            MenuName = "DineIn 2"
                        },
                        new
                        {
                            DineInMenuId = 3,
                            MenuName = "Sub DineIn A",
                            ParentMenuId = 1
                        },
                        new
                        {
                            DineInMenuId = 4,
                            MenuName = "Sub DineIn B",
                            ParentMenuId = 1
                        },
                        new
                        {
                            DineInMenuId = 5,
                            MenuName = "Sub DineIn C",
                            ParentMenuId = 2
                        });
                });

            modelBuilder.Entity("AliceRestaurant.Models.Dish", b =>
                {
                    b.Property<int>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DishId"));

                    b.Property<string>("Allergy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryMenuId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DineInMenuId")
                        .HasColumnType("int");

                    b.Property<string>("DineInType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("KoreanName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SellingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DishId");

                    b.HasIndex("DeliveryMenuId");

                    b.HasIndex("DineInMenuId");

                    b.ToTable("Dishes");

                    b.HasData(
                        new
                        {
                            DishId = 1,
                            Allergy = "Allergy",
                            CreatedOn = new DateTime(2024, 3, 30, 19, 58, 17, 960, DateTimeKind.Local).AddTicks(9763),
                            DeliveryMenuId = 1,
                            DeliveryType = "Delivery",
                            Description = "Dish One Description",
                            DineInMenuId = 1,
                            DineInType = "DineIn",
                            DishName = "Dish 1",
                            EnglishName = "Dish One",
                            ImageUrl = "https://www.google.com",
                            IsAvailable = true,
                            KoreanName = "Dish One",
                            LastUpdated = new DateTime(2024, 3, 30, 19, 58, 17, 960, DateTimeKind.Local).AddTicks(9748),
                            Price = 10m,
                            RestaurantId = 1,
                            SellingDate = new DateTime(2024, 3, 30, 19, 58, 17, 960, DateTimeKind.Local).AddTicks(9767),
                            ShortName = "D1"
                        },
                        new
                        {
                            DishId = 2,
                            Allergy = "Allergy",
                            CreatedOn = new DateTime(2024, 3, 30, 19, 58, 17, 960, DateTimeKind.Local).AddTicks(9770),
                            DeliveryMenuId = 2,
                            DeliveryType = "Delivery",
                            Description = "Dish Two Description",
                            DineInMenuId = 2,
                            DineInType = "DineIn",
                            DishName = "Dish 2",
                            EnglishName = "Dish Two",
                            ImageUrl = "https://www.google.com",
                            IsAvailable = true,
                            KoreanName = "Dish Two",
                            LastUpdated = new DateTime(2024, 3, 30, 19, 58, 17, 960, DateTimeKind.Local).AddTicks(9770),
                            Price = 20m,
                            RestaurantId = 2,
                            SellingDate = new DateTime(2024, 3, 30, 19, 58, 17, 960, DateTimeKind.Local).AddTicks(9773),
                            ShortName = "D2"
                        },
                        new
                        {
                            DishId = 3,
                            Allergy = "Allergy",
                            CreatedOn = new DateTime(2024, 3, 30, 19, 58, 17, 960, DateTimeKind.Local).AddTicks(9774),
                            DeliveryMenuId = 3,
                            DeliveryType = "Delivery",
                            Description = "Dish Three Description",
                            DineInMenuId = 3,
                            DineInType = "DineIn",
                            DishName = "Dish 3",
                            EnglishName = "Dish Three",
                            ImageUrl = "https://www.google.com",
                            IsAvailable = true,
                            KoreanName = "Dish Three",
                            LastUpdated = new DateTime(2024, 3, 30, 19, 58, 17, 960, DateTimeKind.Local).AddTicks(9774),
                            Price = 30m,
                            RestaurantId = 3,
                            SellingDate = new DateTime(2024, 3, 30, 19, 58, 17, 960, DateTimeKind.Local).AddTicks(9776),
                            ShortName = "D3"
                        });
                });

            modelBuilder.Entity("AliceRestaurant.Models.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RestaurantId");

                    b.ToTable("Restaurant");

                    b.HasData(
                        new
                        {
                            RestaurantId = 1,
                            Name = "Restaurant 1"
                        },
                        new
                        {
                            RestaurantId = 2,
                            Name = "Restaurant 2"
                        },
                        new
                        {
                            RestaurantId = 3,
                            Name = "Restaurant 3"
                        });
                });

            modelBuilder.Entity("AliceRestaurant.Models.RestaurantDish", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("DishId", "RestaurantId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantDish");

                    b.HasData(
                        new
                        {
                            DishId = 1,
                            RestaurantId = 1
                        },
                        new
                        {
                            DishId = 2,
                            RestaurantId = 1
                        },
                        new
                        {
                            DishId = 3,
                            RestaurantId = 1
                        },
                        new
                        {
                            DishId = 1,
                            RestaurantId = 2
                        },
                        new
                        {
                            DishId = 2,
                            RestaurantId = 2
                        },
                        new
                        {
                            DishId = 3,
                            RestaurantId = 3
                        });
                });

            modelBuilder.Entity("AliceRestaurant.Models.DeliveryMenu", b =>
                {
                    b.HasOne("AliceRestaurant.Models.DeliveryMenu", "ParentMenu")
                        .WithMany("DeliveryMenus")
                        .HasForeignKey("ParentMenuId");

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("AliceRestaurant.Models.DineInMenu", b =>
                {
                    b.HasOne("AliceRestaurant.Models.DineInMenu", "ParentMenu")
                        .WithMany("DineInMenus")
                        .HasForeignKey("ParentMenuId");

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("AliceRestaurant.Models.Dish", b =>
                {
                    b.HasOne("AliceRestaurant.Models.DeliveryMenu", "DeliveryMenu")
                        .WithMany("Dishes")
                        .HasForeignKey("DeliveryMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AliceRestaurant.Models.DineInMenu", "DineInMenu")
                        .WithMany("Dishes")
                        .HasForeignKey("DineInMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryMenu");

                    b.Navigation("DineInMenu");
                });

            modelBuilder.Entity("AliceRestaurant.Models.RestaurantDish", b =>
                {
                    b.HasOne("AliceRestaurant.Models.Dish", "Dish")
                        .WithMany("RestaurantDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AliceRestaurant.Models.Restaurant", "Restaurant")
                        .WithMany("RestaurantDishes")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("AliceRestaurant.Models.DeliveryMenu", b =>
                {
                    b.Navigation("DeliveryMenus");

                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("AliceRestaurant.Models.DineInMenu", b =>
                {
                    b.Navigation("DineInMenus");

                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("AliceRestaurant.Models.Dish", b =>
                {
                    b.Navigation("RestaurantDishes");
                });

            modelBuilder.Entity("AliceRestaurant.Models.Restaurant", b =>
                {
                    b.Navigation("RestaurantDishes");
                });
#pragma warning restore 612, 618
        }
    }
}
