// <auto-generated />
using System;
using AliceRestaurant.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AliceRestaurant.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240402090035_init_database")]
    partial class init_database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AliceRestaurant.Models.DeliveryCategory", b =>
                {
                    b.Property<int>("DeliveryCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryCategoryId"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryCategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("DeliveryCategories");
                });

            modelBuilder.Entity("AliceRestaurant.Models.DineInCategory", b =>
                {
                    b.Property<int>("DineInCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DineInCategoryId"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("DineInCategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("DineInCategories");
                });

            modelBuilder.Entity("AliceRestaurant.Models.Dish", b =>
                {
                    b.Property<int>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DishId"));

                    b.Property<string>("Allergy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DineInCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("DineInType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("KoreanName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SellingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DishId");

                    b.HasIndex("DeliveryCategoryId");

                    b.HasIndex("DineInCategoryId");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("AliceRestaurant.Models.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantId"));

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RestaurantId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("AliceRestaurant.Models.RestaurantDish", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("DishId", "RestaurantId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantDishes");
                });

            modelBuilder.Entity("AliceRestaurant.Models.DeliveryCategory", b =>
                {
                    b.HasOne("AliceRestaurant.Models.DeliveryCategory", "ParentCategory")
                        .WithMany("DeliveryCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("AliceRestaurant.Models.DineInCategory", b =>
                {
                    b.HasOne("AliceRestaurant.Models.DineInCategory", "ParentCategory")
                        .WithMany("DineInCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("AliceRestaurant.Models.Dish", b =>
                {
                    b.HasOne("AliceRestaurant.Models.DeliveryCategory", "DeliveryCategory")
                        .WithMany("Dishes")
                        .HasForeignKey("DeliveryCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AliceRestaurant.Models.DineInCategory", "DineInCategory")
                        .WithMany("Dishes")
                        .HasForeignKey("DineInCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryCategory");

                    b.Navigation("DineInCategory");
                });

            modelBuilder.Entity("AliceRestaurant.Models.RestaurantDish", b =>
                {
                    b.HasOne("AliceRestaurant.Models.Dish", "Dish")
                        .WithMany("RestaurantDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AliceRestaurant.Models.Restaurant", "Restaurant")
                        .WithMany("RestaurantDishes")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("AliceRestaurant.Models.DeliveryCategory", b =>
                {
                    b.Navigation("DeliveryCategories");

                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("AliceRestaurant.Models.DineInCategory", b =>
                {
                    b.Navigation("DineInCategories");

                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("AliceRestaurant.Models.Dish", b =>
                {
                    b.Navigation("RestaurantDishes");
                });

            modelBuilder.Entity("AliceRestaurant.Models.Restaurant", b =>
                {
                    b.Navigation("RestaurantDishes");
                });
#pragma warning restore 612, 618
        }
    }
}
